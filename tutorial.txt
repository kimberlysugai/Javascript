# Lógica de programação

# Photshop

# front-end
- HTML5 e CSS3
- UX UI
- JavaScript
- Frameworks (bootstrap)
- CMS (wordpress)

# banco de dados

# sistemas desktop
electron

# back-end (Java ou php)

# testes

# pi
___________________________________
Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados

GIT e GITHUB

Comandos básicos do git:
git config --global user.name "Kimberlysugai"
git config --global user.email "sugaisilvawagner@gmail.com"
git clone url_do_repositório (clonar um repositório)
git status (verificar o status do repositorio local)
git add .  (adiciona ao repositóro local)
git commit -m "tutorial" (documentar as alterações)
git push (enviar ao repositório GitHub)
git pull (sincroniza as informações de repositório) no PC

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

--------------------------------------------------------------------------------------------------------------

Boas práticas na programação
1)Cabeçalho de documentação
/**
    nome do projeto
    Descrição da classe / função
    @author Kimberly Sugai
    @version 1.0
    */

2)Nome de arquivos variáveis,funções,classes, etc.
  Regras (clean code)
  - Declara nomes que tenham relação com o problema
  - Não usar espaço, "ç", acentos e caracteres especiais para declaração de nomes (erros internos no programa)
  - Só classes iniciam com letra maiúscula
  - Não iniciar um nome com número
  - Quando for declarar dois nomes usar a técnica do camelo (camel case)
    Exemplo
    nomecliente -> nomeCliente

    --------------------------------------------------------------------------------------------------------------------
    Comandos básicos do MS-dois

    cls -> limpar a tela
    dir -> listar arquivos e diretórios
    cd nome_diretório -> entrar no diretórios
    cd .. -> voltar para o diretório anterior
-------------------------------------------------------------------------------------------------------------------------

    Node -Plataforma que permite a execução do JavaScript fora do navegador (browser)
    https://nodejs.org/ ( baixar sempre a versão LTS)

    Comandos básicos:
    node -v v(para verificar a versão)

    gerenciador de pacotes para o node
    npm está relacionado à pasta do projeto ou seja os pacotes são instalados na raiz do projeto e não no sistema operacional

    npm -v (verificar versão do npm)
    npm ls (listar pacotes instalados)

    npm init (iniciar um novo projeto JavaScript)
        _____package.json

    json(JavaScript object notation)

    -----------------------------------------------------------------------------------------------------------------------------

    Variaveis e constante:

Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, ele não pode ser alterado durante a execução do programa.
Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, facilitando a manutenção do código.

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.



Nas linguagens de programação as variáveis são estáticas tipadas ou dinâmicamente tipadas

Existem 3 tipos de variáveis:

string -> armazena caracteres e números
number -> Armazena números inteiros e não inteirosBoolean -> true | false

ATENÇÃO: No JS uma variável pode ser criada usando let ou var
var (obsoleto e inseguro), usar sempre o let



Comandos JavaScript (Sintaxe)
console.log() -> escrever no console
console.clear() -> limpar a tela do console
const -> Criar (declarar uma constante)
let -> Criar declarar uma variável
typeof() -> verificar o tipo da variável
